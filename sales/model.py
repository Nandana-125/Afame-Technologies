# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-uesLfItM7xnFyePr41CPCVC1RZW6Z6A
"""

import pandas as pd

# Load the dataset into a DataFrame
df = pd.read_csv('Sales.csv')

# Display the first few rows of the dataset
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Display summary statistics
print(df.describe())

import matplotlib.pyplot as plt
import seaborn as sns

# Visualize the distribution of sales
plt.figure(figsize=(8, 6))
sns.histplot(df['Sales'], bins=20)
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.title('Distribution of Sales')
plt.show()

# Visualize the relationship between advertising expenditure and sales
plt.figure(figsize=(8, 6))
sns.pairplot(df, x_vars=['TV', 'Radio', 'Newspaper'], y_vars='Sales', kind='scatter')
plt.show()

from sklearn.model_selection import train_test_split

X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

X_train , X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error, mean_squared_error

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Calculate evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')

# Ask the user to enter the values for TV, Radio, and Newspaper advertising expenditures
tv_expense = float(input("Enter the TV advertising expenditure: "))
radio_expense = float(input("Enter the Radio advertising expenditure: "))
newspaper_expense = float(input("Enter the Newspaper advertising expenditure: "))

# Create a DataFrame for the user-entered data
user_data = {
    'TV': [tv_expense],
    'Radio': [radio_expense],
    'Newspaper': [newspaper_expense]
}

user_df = pd.DataFrame(user_data)

# Use the trained model to predict sales for the user-entered data
predicted_sales = model.predict(user_df)

# Print the predicted sales
print(f"Predicted Sales: {predicted_sales[0]}")

# Correlation Analysis
correlation_sales = df.corr()['Sales'].drop('Sales')  # Correlation coefficients with Sales
print("Correlation with Sales:")
print(correlation_sales)

# Data Visualization
import matplotlib.pyplot as plt

# Scatter plot for TV vs Sales
plt.figure(figsize=(10, 5))
plt.scatter(df['TV'], df['Sales'], color='blue', alpha=0.5)
plt.title('TV Advertising Expenditure vs Sales')
plt.xlabel('TV Advertising Expenditure')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

# Scatter plot for Newspaper vs Sales
plt.figure(figsize=(10, 5))
plt.scatter(df['Newspaper'], df['Sales'], color='green', alpha=0.5)
plt.title('Newspaper Advertising Expenditure vs Sales')
plt.xlabel('Newspaper Advertising Expenditure')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

# Scatter plot for Radio vs Sales
plt.figure(figsize=(10, 5))
plt.scatter(df['Radio'], df['Sales'], color='red', alpha=0.5)
plt.title('Radio Advertising Expenditure vs Sales')
plt.xlabel('Radio Advertising Expenditure')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

import joblib
# Assuming your trained model is named 'model'
# Save the model to a file
joblib.dump(model, 'sales_prediction_model.pkl')

from google.colab import files


# Download the file to your local system
files.download('sales_prediction_model.pkl')